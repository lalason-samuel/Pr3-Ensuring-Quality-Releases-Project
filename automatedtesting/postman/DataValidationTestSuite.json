{
	"info": {
		"_postman_id": "8ba51422-da20-4d87-8b4e-59d184eb13ba",
		"name": "Data Validation Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19605186",
		"_collection_link": "https://samiwell.postman.co/workspace/Team-Workspace~0a07d0b3-ad98-4432-8ce9-b62cc97af101/collection/19605186-8ba51422-da20-4d87-8b4e-59d184eb13ba?action=share&creator=19605186&source=collection_link"
	},
	"item": [
		{
			"name": "Create Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"pm.environment.set(\"id\", json.id);",
							"pm.variables.set(\"user_id\", json.id);",
							"",
							"var schema = {",
							"    \"id\": { \"type\": \"number\" },",
							"    \"idBook\": { \"type\": \"number\" },",
							"    \"firstName\": { \"type\": \"string\" },",
							"    \"lastName\": { \"type\": \"string\" }",
							"};",
							"",
							"pm.test(\"Validate Success\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"});",
							"",
							"pm.test('Validate schema', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Validate Data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"    pm.expect(jsonData.idBook).to.eql(parseInt(pm.environment.get(\"idBook\")));",
							"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"lastName\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{id}}\",\n    \"idBook\": \"{{idBook}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{version}}/Authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{version}}",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {",
							"    \"type\": \"array\",",
							"    \"items\": {",
							"        \"id\": { \"type\": \"number\" },",
							"        \"idBook\": { \"type\": \"number\" },",
							"        \"firstName\": { \"type\": \"string\" },",
							"        \"lastName\": { \"type\": \"string\" }",
							"    }",
							"};",
							"",
							"pm.test('Validate schema', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Validate Success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{version}}/Authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{version}}",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"pm.environment.set(\"id\", json.id);",
							"pm.variables.set(\"user_id\", json.id);",
							"",
							"var schema = {",
							"    \"id\": { \"type\": \"number\" },",
							"    \"idBook\": { \"type\": \"number\" },",
							"    \"firstName\": { \"type\": \"string\" },",
							"    \"lastName\": { \"type\": \"string\" }",
							"};",
							"",
							"pm.test(\"Validate Success\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"});",
							"",
							"pm.test('Validate schema', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Validate Data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"    pm.expect(jsonData.idBook).to.eql(parseInt(pm.environment.get(\"idBook\")));",
							"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"lastName\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{id}}\",\n    \"idBook\": \"{{idBook}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{version}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{version}}",
						"Authors",
						"{{id}}"
					]
				},
				"description": "Update an employee record"
			},
			"response": []
		},
		{
			"name": "Get Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"pm.environment.set(\"id\", json.id);",
							"pm.variables.set(\"user_id\", json.id);",
							"",
							"var schema = {",
							"    \"id\": { \"type\": \"number\" },",
							"    \"idBook\": { \"type\": \"number\" },",
							"    \"firstName\": { \"type\": \"string\" },",
							"    \"lastName\": { \"type\": \"string\" }",
							"};",
							"",
							"pm.test(\"Validate Success\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"});",
							"",
							"pm.test('Validate schema', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Validate Data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"    pm.expect(jsonData.idBook).to.eql(parseInt(pm.environment.get(\"idBook_5\")));",
							"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"firstName_5\"));",
							"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"lastName_5\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{version}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{version}}",
						"Authors",
						"{{id}}"
					]
				},
				"description": "Get a single employee data"
			},
			"response": []
		},
		{
			"name": "Delete Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/{{version}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{version}}",
						"Authors",
						"{{id}}"
					]
				},
				"description": "Delete an employee record"
			},
			"response": []
		}
	]
}